#include <iostream>
using namespace std;

struct Node;
typedef struct Node* PNode;
struct Node
{
	char element;
	PNode next;
};

struct LinkQueue
{
	PNode f, r;
};
typedef struct LinkQueue* PLinkQueue;

PLinkQueue createEmptyQueue_link(void)
{
	PLinkQueue q;
	q = (PLinkQueue)malloc(sizeof(struct LinkQueue));
	if (q != NULL)
	{
		q->f = NULL;
		q->r = NULL;
	}
	else
	{
		cout << "Out of space!" << endl;
	}
	return q;
}

int isEmptyQueue_link(PLinkQueue q)
{
	return(q->f == NULL);//to return '1' if the queue is empty;
}

void Enqueue_link(PLinkQueue q, char x)
{
	PNode unit;
	unit = (PNode)malloc(sizeof(struct Node));
	if (unit == NULL)
	{
		cout << "Out of space!" << endl;
	}
	else
	{
		unit->element = x;
		unit->next = NULL;
		if (q->f == NULL)//the queue is still empty before enqueuing x;
		{
			q->f = unit;//if x is the first element of the queue, make x the new front of the queue;
		}
		else
		{
			q->r->next = unit;//the queue is not empty before enqueuing x;
		}
		q->r = unit;//to make x the new rear of the queue;
	}
}

void Dequeue_link(PLinkQueue q)
{
	if (q->f == NULL)
	{
		cout << "The queue is empty!" << endl;
	}
	else
	{
		PNode temp;
		temp = q->f;
		q->f = q->f->next;
		free(temp);//does this really work or necessary?
	}
}

int lengthQueue_link(PLinkQueue q)
{
	PNode temp;
	int count = 1;
	if (q->f == NULL)
	{
		return 0;
	}
	else//this is the reason that "int count = 1";
	{
		temp = q->f;
		do
		{
			temp = temp->next;
			count++;
		} while (temp->next != NULL);
		return count;
	}
}

void printQueue_link(PLinkQueue q)
{
	if (q->f == NULL)
	{
		cout << "The queue is empty!" << endl;
	}
	else
	{
		PNode temp;
		temp = q->f;
		cout << "The elements in the queue are: (from front to rear)" << endl;
		cout << temp->element << endl;
		while (temp->next != NULL)
		{
			temp = temp->next;
			cout << temp->element << endl;
		}
		cout << "All elements in the queue have been printed!" << endl;
	}
}


int main()
{
	int a, b, length;
	char x;
	PLinkQueue q_2;
	q_2 = createEmptyQueue_link();
	do
	{
		cout << "How many elements would you like to enqueue?" << endl;
		cin >> a;
	} while (a <= 0);
	cout << "Please input the " << a << " elements you would like to input!" << endl;
	for (int i = 0; i < a; i++)
	{
		cin >> x;
		Enqueue_link(q_2, x);
	}
	length = lengthQueue_link(q_2);
	cout <<"The length of the queue is: " <<length << endl;
	printQueue_link(q_2);
	length = lengthQueue_link(q_2);
	do
	{
		cout << "How many elements would you like to dequeue?" << endl;
		cin >> b;
	} while (length < b || b <= 0);
	for (int i = 0; i < b; i++)
	{
		Dequeue_link(q_2);
	}
	printQueue_link(q_2);
	return 0;
}
