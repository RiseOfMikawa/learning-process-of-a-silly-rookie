#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <iostream>
using namespace std;

struct SeqQueue
{
	int MAXNUM, f, r, size;
	char* element;
};
typedef struct SeqQueue* PSeqQueue;

PSeqQueue createEmptyQueue(int m)
{
	PSeqQueue q = (PSeqQueue)malloc(sizeof(struct SeqQueue));
	if (q != NULL)
	{
		q->element = (char*)malloc(sizeof(char) * m);
		if (q->element)
		{
			q->MAXNUM = m;
			q->f = 0;
			q->r = 0;
			q->size = 0;
			return q;
		}
		else
		{
			free(q);
		}
	}
	printf("Out of space! \n");
	return NULL;
}


void makeQueueEmpty_seq(PSeqQueue q)
{
	q->f = 0;
	q->r = 0;
	q->size = 0;
}

int isEmptyQueue_seq(PSeqQueue q)
{
	if (q->f == q->r)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

void Enqueue_seq(PSeqQueue q, char x)//to enqueue elemext x to the rear of the queue;
{
	if ((q->r + 1) % q->MAXNUM == q->f)//"if(q->r + 1 == q->f || q->r + 1 == q->MAXNUM)";
	{
		printf("The queue is full! \n");
	}
	else
	{
		q->element[q->r] = x;
		q->r = (q->r + 1) % q->MAXNUM;
		q->size++;
	}
}

void Dequeue_seq(PSeqQueue q)//to dequeue an elemext from the front of the queue;
{
	if (q->f == q->r)
	{
		printf("The queue is empty! \n");
	}
	else
	{
		q->f = (q->f + 1) % q->MAXNUM;
		q->size--;
	}
}

void printQueue_seq(PSeqQueue q)
{
	//int length;
	if (q->f == q->r)
	{
		printf("The queue is empty! \n");
	}
	else
	{
		//length = lengthQueue_seq(q);
		printf("The size of the queue is %d, elements in the queue are: \n", q->size);
		for (int i = 0; i < q->size; i++)
		{	
			printf("%c \n", q->element[(q->f + i) % (q->MAXNUM)]);//"length" is very useful here;
		}
		printf("This is the rear of the queue! \n");
	}
}

int main()//用scanf的时候会出bug，不知道为什么
{
	PSeqQueue q_1;
	int maxNum, a, b;
	char x;
	do
	{
		printf("Please input the MAXNUM of the queue! \n");
		cin >> maxNum;
	} while (maxNum <= 0);
	q_1 = createEmptyQueue(maxNum);
	do
	{
		printf("How many elements would you like to add in the queue? \n");
		cin >> a;
	} while (maxNum - 1 - q_1->size < a);//the max number of elements is "maxNum - 1";
	printf("Please input the %d elements you would like to enqueue! \n", a);
	for (int i = 0; i < a; i++)
	{
		cin >> x;
		Enqueue_seq(q_1, x);
	}
	printQueue_seq(q_1);
	do
	{
		printf("How many elements would you like to delete from the queue? \n");
		cin >> b;
	} while (q_1->size < b);
	for (int i = 0; i < b; i++)
	{
		Dequeue_seq(q_1);
	}
	printQueue_seq(q_1);	
	return 0;
}
